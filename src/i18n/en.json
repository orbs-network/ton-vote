{
  "proposalPage": {
    "castVote": "Cast your vote",
    "timeLeftToVote": "Time left to vote",
    "resultsVerified": "Results verified",
    "verifyingResults": "Verifying results",
    "failedToVerifyResults": "Failed to verify results",
    "address": "Address",
    "vote": "Vote",
    "votingPower": "Voting Power",
    "date": "Date",
    "voteStartsIn": "Vote starts in",
    "results": "Results",
    "recentVotes": "Recent Votes",
    "information": "Information",
    "startDate": "Start Date",
    "endDate": "End Date",
    "snapshot": "Snapshot",
    "contract": "Contract",
    "votingStrategy": "Voting Strategy",
    "votes": "votes",
    "showMore": "Show more",
    "showLess": "Show less",
    "verifyInfo": "Download votes from chain and verify the results in browser. [Read more](https://github.com/orbs-network/ton-vote#how-can-you-verify-the-results)",
    "downloadCsv": "Download CSV",
    "yourVotingPower": "Your voting power",
    "choice": "Choice",
    "notEnoughVotingPower": " Oops, it seems you don't have any voting power on block {{value}}",
    "confirm": "Confirm",
    "noVotes": "No votes",
    "you": "You",
    "httpsv2Endpoint": "HTTP v2 endpoint",
    "httpsv2ApiKey": "HTTP v2 API key",
    "httpv4Endpoint": "HTTP v4 endpoint",
    "tonAccessEnpoint": "Default endpoint [(Orbs Ton Access)](https://www.orbs.com/ton-access/)",
    "customEndpoint": "Custom endpoint",
    "verify": "Verify",
    "verifyResults": "Verify results",
    "rpcSelectTitle": "RPC endpoint settings"
  },
  "daoPage": {
    "proposals": "Proposals",
    "about": "About",
    "newProposal": "New Proposal",
    "newTestProposal": "New Test Proposal",
    "startIn": "Starts in {{value}}",
    "endIn": "Ends in {{value}}",
    "emptyProposals": "No proposals found",
    "endedAndDidntPassedQuorum": "Proposal ended and did not pass the minimum required quorum",
    "proposalEnded": "Ended {{value}} ago",
    "spaceNotFound" : "Space not found",
    "settings": "Settings"
  },
  "daosPage": {
    "spaces": "DAO spaces on TON",
    "noSpaces": "No spaces found",
    "searchForDAO": "Search for DAO",
    "createDao": "Create DAO space"
  },
  "airdrop":{
    "gettingStarted":{ 
      "body":"The Airdrop Assistant facilitates the transfer of assets to users of ton.vote who have participated by voting on proposals. /n Anyone can utilize this feature to transfer assets to these users, whether Jettons or NFTs, to random or specific recipients. /n To transfer an asset, you first need to connect with the owner's wallet. /n Then, you can choose the type of airdrop, either Jetton or NFT, in the initial stage. /n If you are transferring Jettons, you simply input the total amount and the Jetton wallet address. /n If you are transferring NFTs you will need to enter manually in the last step the address of each NFT item that you want to transfer. /n Next, the assistant generates the destination wallets, which will receive the airdrop. /n These wallets are sourced from among the users who have actively participated in the ton.vote platform. /n In the final step, you have the option to approve each transfer for all wallets, and afterward, you can download a CSV file containing an airdrop summary. /n This file includes details of all the wallets that received the assets, allowing you to easily share this information with your community. /n Need help? Join the TON.vote Telegram [support channel](https://t.me/TONVoteSupportGroup)."},
   "titles": {
    "selectedAssetCategory": "Select asset category for the airdrop",
    "gettingStarted": "Getting started",
    "generateDstWallets":"Generate destination wallets",
    "transferAssets":"Transfer assets"
   },
   "subtitles":{
    "generateDstWallets":"In this stage, you will create the destination wallets that will receive the airdrop. These destination wallets will be selected from users who were active in the specified proposals in the selected DAO space and submitted their votes on the platform. To proceed, you need to choose the proposals within the specific DAO space, from which the destination wallets will be derived. /n From the pool of voters who participated in the selected proposals, you will have the option to choose recipients randomly, manually select specific voters, or include all voters for the airdrop distribution."
   },
   "jettonWalletAddress": {
    "title":"Jetton wallet address",
    "tooltip":"The wallet that will be used to transfer funds. You should be the owner of this wallet."
   },
   "totalJettonAmount": {
    "title":"Total jetton amount",
    "tooltip":"The total jetton amount that will be transferred to all wallets. This amount will be later divided between all destinations."
   },
   "randomVotersAmount":"Random voters amount",
   "disabledSpace":"This space does not have any proposal with voters. To choose airdrop destination the space must have at least 1 proposal with voters.",
   "errors":{
    "maxVotersAmount":"The maximum number of voters is {{value}}"
   },
   "emptyProposalTooltip":"This proposal does not have any voters. To choose airdrop destination the proposal must have at least 1 voter.",
   "proposalsNotSelected":"Select at least one proposal"
  },
  "createDao": {
    "gettingStarted": "Getting started",
    "gettingStartedBody": "TON.vote is a completely decentralized on-chain DAO governance platform built exclusively for the TON ecosystem. /n Setting up a space for a DAO is free but requires submitting 2 transactions: /n 1. Space Metadata (DAO name, description, logo, socials) /n 2. Space Administrators (space owner and proposal publisher) /n Every transaction deploys a smart contract on TON blockchain mainnet. Both transactions cost about 1 TON in gas fees. /n Any future changes to one of the above will require submitting an update transaction. /n Need help? Join the TON.vote Telegram [support channel](https://t.me/TONVoteSupportGroup).",
    "spaceMetadata": "Space Metadata",
    "editWarning": "Edits will require to sign a transaction in your wallet",
    "spaceAdministrators": "Space Administrators",
    "createSpace": "Create Space",
    "editDetails": "Edit Details",
    "approveDetails": "Approve Details",
    "spaceDetailsCreated": "Space Metadata Created",
    "spaceDetailsUpdated": "Space Metadata Updated",
    "start": "Start",
    "enterSpaceMetadata": "Enter Space Metadata",
    "editSpaceMetadata": "Edit Space Metadata",
    "stage": "Space Administrators",
    "createStage": "Select Space Administrators",
    "editStage": "Edit Space Administrators",
    "formInfo": "Enter all fields in English. Future versions will support adding translations in multiple languages. You can update these fields later.",
    "daoName": "DAO Name",
    "daoAbout": "About the DAO",
    "logoURL": "Logo URL",
    "tonDns": "TON DNS name",
    "submit": "Submit",
    "jetton": "Project jetton",
    "nft": "Project NFT collection",
    "website": "Project website URL",
    "telegramGroup": "Project Telegram group",
    "github": "Project GitHub URL",
    "ownerAddress": "Owner Address",
    "proposalPublusherAddress": "Proposal Publisher Address",
    "tooltips": {
      "daoName": "Short name of the DAO, normally 1-4 words Capitalized separated by spaces.",
      "daoAbout": "What is the purpose of this DAO? Normally 1-4 sentences. Formatted as Markdown",
      "logoURL": "HTTPS URL holding the DAO's logo as a circular PNG image sized 512x512 pixels with transparent background.",
      "tonDNS": "If you own a [TON DNS](https://dns.ton.org/) domain name, enter it to prove the space's authenticity. For example: foundation.ton",
      "jetton": "Does the DAO revolve around a fungible Jetton token that all members hold? If so, place the TON contract address of the Jetton master contract.",
      "nft": "Does the DAO revolve around an NFT that all all members hold? If so, place the TON contract address of the NFT master contract.",
      "owner":"The owner of the space, can change metadata and update admins. Can be a multi-sig contract.",
      "proposalPublisher":"The address that can publish new proposals for vote. Can be a multi-sig contract or a multi-owner contract."
    },
    "errors": {
      "logoURL1": "Logo URL must be https",
      "logoURL2": "Logo URL must be png format",
      "tonDNS": "TON DNS must end with .ton",
      "github": "Invalid Github URL",
      "telegram": "Telegram group should start with https://t.me",
      "website": "invalid Website URL"
    }
  },
  "common": {
    "isRequired": "{{value}} is required",
    "isInvalid": "{{value}} is invalid",
    "edit": "Edit",
    "connectedWallet": "Connected Wallet",
    "create": "Create",
    "tonBalance": "TON Balance",
    "jettonBalance": "Jetton Balance",
    "nftCollection": "NFT Collection",
    "copyAddress": "Copy Address",
    "logout": "Logout",
    "ended": "Ended",
    "notStarted": "Pending",
    "all": "All",
    "active": "Active",
    "back": "Back",
    "checkWallet": "Please check wallet for pending transaction",
    "selectWallet": "Select Wallet",
    "members": "members",
    "loadMore": "Load more",
    "administrators": "Administrators",
    "daoSpaceOwner": "DAO Space Owner",
    "proposalPublisher": "Proposal Publisher",
    "search": "Search",
    "preview": "Preview",
    "help": "Help",
    "close": "Close",
    "connectWallet": "Connect Wallet",
    "next": "Next",
    "transactionRejected":"User rejected the transaction",
    "somethingWentWrong":"Something went wrong",
    "txPending":"Transaction pending",
    "checkWalletForTx":"Check wallet for transaction"
  },
  "createProposal": {
    "votingParameters": "Voting Parameters",
    "createProposal": "Create Proposal",
    "subTitle": "Enter all fields in English. Future versions will support adding translations in multiple languages.",
    "title": "Title",
    "description": "Description",
    "votingPowerStrategy": "Voting power strategy",
    "jettonAddress": "Jetton address",
    "nftAddress": "NFT address",
    "votingChoices": "Voting choices",
    "votingPeroid": "Voting period",
    "votingPeriodInfo": "All timestamps are given in UTC (GMT+0). The UTC time 15:00 is a good choice for when most of the world is awake.",
    "startTime": "Start time",
    "endTime": "End time",
    "snaphotTime": "Snapshot time",
    "proposalDuration": "Proposal duration is",
    "tooltips": {
      "title": "Title of the new proposal, normally 1 sentence. Example: Increase staking reward percentage",
      "description": "All background information needed to help members make a decision in this vote. Normally 3-10 sentences. Formatted as Markdown",
      "votingPowerStrategy": "How is the voting power of each member counted when calculating the vote result. [Read more about strategies](https://github.com/orbs-network/ton-vote/tree/main#supported-strategies)",
      "jettonAddress": "The address of the Jetton",
      "votingChoices": "The different options each voting member needs to choose from when submitting their vote.",
      "startTime": "The UTC time when the vote goes live and members can start submitting their votes. Must be in the future.",
      "endTime": "The UTC time when the vote terminates and members would no longer be able to submit votes. Must be after start time but no more than 10 days after.",
      "snapshotTime": "To protect against manipulation, every member's voting power will be calculated on this snapshot UTC date. Must be before vote start time but no more than 14 days before."
    },
    "errors": {
      "isRequired": "{{value}} is required",
      "titleLength": "Title must be less than or equal to {{value}} characters",
      "aboutLength": "About must be less than or equal to {{value}} characters",
      "invalidJettonAddress": "Invalid jetton address",
      "invalidNFTAddress": "Invalid NFT address",
      "startTime1": "Proposal start time must be greater than current time",
      "startTime2": "Proposal start time can be up to 10 days in the future",
      "endTime1": "Proposal end time must be greater than proposal start time",
      "endTime2": "Proposal end time must be at least 1 day after proposal start time",
      "endTime3": "Proposal end time can be up to 10 days after proposal start time",
      "snapshotTime1": "Snaphot time must be smaller than current time"
    }
  }
}
